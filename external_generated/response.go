/*
 * Insolar Authorization Service API
 *
 * # Authorization service API  This document provides an API reference for the Insolar authentication service (auth-service).  Auth-service allows the Insolar Observer nodes to register and authenticate in the Insolar network.  ## Connect your Observer node to the Insolar network  To connect, complete the following steps:  1. Acquire a login and a registration code from Insolar.     The code is unique, lives for 24 hours, expires upon first use, and allows you to set your password.  2. [Set a password](#operation/set-password) with the provided code, login, and your password in parameters.  Observer node authenticates in the Insolar network in the following way:  1. Using basic authorization (your login and password), the Observer requests a new JSON Web Token (JWT) for every request.     The auth-service checks the login-password pair and, if valid, issues a JWT for authentication.  2. Then, the Observer substitutes the corresponding header of every request to the Insolar network with the acquired JWT.     Insolar's heavy node checks the JWT's validity and expiry timestamp.
 *
 * API version: 1.0.0
 * Contact: dev-support@insolar.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package client

import (
	"net/http"
)

// APIResponse stores the API response returned by the server.
type APIResponse struct {
	*http.Response `json:"-"`
	Message        string `json:"message,omitempty"`
	// Operation is the name of the OpenAPI operation.
	Operation string `json:"operation,omitempty"`
	// RequestURL is the request URL. This value is always available, even if the
	// embedded *http.Response is nil.
	RequestURL string `json:"url,omitempty"`
	// Method is the HTTP method used for the request.  This value is always
	// available, even if the embedded *http.Response is nil.
	Method string `json:"method,omitempty"`
	// Payload holds the contents of the response body (which may be nil or empty).
	// This is provided here as the raw response.Body() reader will have already
	// been drained.
	Payload []byte `json:"-"`
}

// NewAPIResponse returns a new APIResonse object.
func NewAPIResponse(r *http.Response) *APIResponse {

	response := &APIResponse{Response: r}
	return response
}

// NewAPIResponseWithError returns a new APIResponse object with the provided error message.
func NewAPIResponseWithError(errorMessage string) *APIResponse {

	response := &APIResponse{Message: errorMessage}
	return response
}
