// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
	"net/http"
)

// ParametersSetPassword defines model for parameters-set-password.
type ParametersSetPassword struct {

	// Unique login provided by Insolar.
	Login string `json:"login"`

	// Strong password that must:
	// * Contain at least 1 number, 1 lowercase, and 1 uppercase letter.
	// * Have length from 8 to 12 symbols inclusively.
	Password string `json:"password"`
}

// ResponsesToken defines model for responses-token.
type ResponsesToken struct {

	// JSON Web Token that grants a request invocation right in the Insolar network. Lives for 15 minutes and expires upon first use.
	AccessToken string `json:"access_token"`

	// Token expiration timestamp in Unix format.
	Expiration int64 `json:"expiration"`
}

// SetPasswordJSONBody defines parameters for SetPassword.
type SetPasswordJSONBody ParametersSetPassword

// SetPasswordParams defines parameters for SetPassword.
type SetPasswordParams struct {

	// Unique registration code. Lives for 24 hours, expires upon first use, and allows to set the password for basic authentication.
	Code string `json:"code"`
}

// TokenParams defines parameters for Token.
type TokenParams struct {

	// HTTP basic authorization header with the Base64 encoding of login and password joined by a single colon `:`.
	AuthorizationBasic []byte `json:"Authorization: Basic"`
}

// SetPasswordRequestBody defines body for SetPassword for application/json ContentType.
type SetPasswordJSONRequestBody SetPasswordJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Set password
	// (POST /auth/set-password)
	SetPassword(ctx echo.Context, params SetPasswordParams) error
	// Get token
	// (GET /auth/token)
	Token(ctx echo.Context, params TokenParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SetPassword converts echo context to params.
func (w *ServerInterfaceWrapper) SetPassword(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SetPasswordParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetPassword(ctx, params)
	return err
}

// Token converts echo context to params.
func (w *ServerInterfaceWrapper) Token(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TokenParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization: Basic" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization: Basic")]; found {
		var AuthorizationBasic []byte
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization: Basic, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "Authorization: Basic", valueList[0], &AuthorizationBasic)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: Basic: %s", err))
		}

		params.AuthorizationBasic = AuthorizationBasic
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization: Basic is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Token(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/auth/set-password", wrapper.SetPassword)
	router.GET("/auth/token", wrapper.Token)

}
