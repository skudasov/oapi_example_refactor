// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
	"net/http"
)

// ResponsesClientYaml defines model for responses-client-yaml.
type ResponsesClientYaml struct {

	// Client state:
	//
	// * Active if `true`
	// * Inactive if `false`
	//
	// If inactive, the client cannot get authentication tokens (JWTs).
	Active bool `json:"active"`

	// Unique client login.
	Login string `json:"login"`

	// Timestamp of the latest modification.
	ModifiedAt int64 `json:"modified_at"`
}

// ResponsesClientsYaml defines model for responses-clients-yaml.
type ResponsesClientsYaml struct {

	// Array of client objects.
	Clients *[]ResponsesClientYaml `json:"clients,omitempty"`
}

// ResponsesNewClient defines model for responses-new-client.
type ResponsesNewClient struct {

	// Unique client login.
	Login string `json:"login"`

	// Partially formed `/set-password` request with a registration code in query. To be used by the client to set the password.
	RegisterAt string `json:"register_at"`
}

// SchemasClient defines model for schemas-client.
type SchemasClient struct {

	// Unique client login.
	Login string `json:"login"`
}

// SchemasClientActivate defines model for schemas-client-activate.
type SchemasClientActivate struct {

	// Client state to set: if `"active": false`, the client cannot get authentication tokens (JWTs).
	Active bool `json:"active"`

	// Unique login of the client to enable or disable.
	Login string `json:"login"`
}

// AddClientJSONBody defines parameters for AddClient.
type AddClientJSONBody SchemasClient

// ActivateClientJSONBody defines parameters for ActivateClient.
type ActivateClientJSONBody SchemasClientActivate

// AddClientRequestBody defines body for AddClient for application/json ContentType.
type AddClientJSONRequestBody AddClientJSONBody

// ActivateClientRequestBody defines body for ActivateClient for application/json ContentType.
type ActivateClientJSONRequestBody ActivateClientJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get clients
	// (GET /clients)
	ClientArray(ctx echo.Context) error
	// Add client
	// (POST /clients)
	AddClient(ctx echo.Context) error
	// Activate or deactivate client
	// (PUT /clients)
	ActivateClient(ctx echo.Context) error
	// Get client
	// (GET /clients/{login})
	GetClient(ctx echo.Context, login string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ClientArray converts echo context to params.
func (w *ServerInterfaceWrapper) ClientArray(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ClientArray(ctx)
	return err
}

// AddClient converts echo context to params.
func (w *ServerInterfaceWrapper) AddClient(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddClient(ctx)
	return err
}

// ActivateClient converts echo context to params.
func (w *ServerInterfaceWrapper) ActivateClient(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ActivateClient(ctx)
	return err
}

// GetClient converts echo context to params.
func (w *ServerInterfaceWrapper) GetClient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "login" -------------
	var login string

	err = runtime.BindStyledParameter("simple", false, "login", ctx.Param("login"), &login)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter login: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClient(ctx, login)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/clients", wrapper.ClientArray)
	router.POST("/clients", wrapper.AddClient)
	router.PUT("/clients", wrapper.ActivateClient)
	router.GET("/clients/:login", wrapper.GetClient)

}
